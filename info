;; lisp start
атом или точененая пара
атом (неделимое):
	константы (литералы)
		  1, а, 12.32, 2/3, С#(1 -2)
	символы:
		имена функций, переменных и т.д, nil

точечная пара:
	 (1 . 2) ((1 . 2) . (3 . 5))

список:
	(a . (b . (c . ()))) = (a b c) ; (сокращенно)

неправильный или точечный список:
	     (a b c . d) = (a . (b . (c . d)))

спецформы:
	очень хитрая штука, может манипулировать контекстами и вообще хрен пойми как она вычисляется
	пример: quote или ' - запрет вычисления

eq - истина если 2 объекта один и тот же
eql - в дополнение к eq истина если одно число (одного типа) или один и тот же алфавитный символ

функции:


rplaca - заменить car
rplacd - заменить cdr

setf - меняет значение в памяти, которая соответствует тому, где лежит вычисленное значение

next: 326 and 102

(function name) и #'name - одно и то же - добраться до объекта функции
	  это не то же самое что symbol-function

apply - вызвать функцию и передать ей аргументы списком
funcall - вызвать функцию с параметрами не списком, пример:
	(apply #'+ '(1 2 3 4))
	(funcall #'+ 1 2 3 4)
	одно и то же

mapcar - применить функцию к спискам по очереди
       (mapcar #'+ '(1 2 3 4) '(10 20 30 40) '(100 200 300 400))

lambda:
	((lambda (a b c) (+ a (* b c))) 10 3 5)
	(setq i 10)
	(mapcar #'(lambda (a) (+ a i) '(10 20 30)))

let:
	(let (vars) (body))